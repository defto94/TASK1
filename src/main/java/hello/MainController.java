package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
        /*
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.getName();
		n.getEmail();
		userRepository.save(n);
		return "Saved";
	}
        */
        @GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
                
                User n = new User();
                n.setName(name);
                n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
        
        /*
        @GetMapping(path="/delete") // Map ONLY GET Requests
	public @ResponseBody String removeNewUser (@RequestParam Long id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
                n.setId(id);
		userRepository.delete(n);
		return "Deleted";
	}
        */
        /*
         @GetMapping(path="/update") // Map ONLY GET Requests
	public @ResponseBody String updateUser (@RequestParam Long id, @RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = userRepository.findOne(id);
                n.setName(name);
                n.setEmail(email);
		userRepository.save(n);
		return "Updated";
	}
        */
        /*
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
        */
        
        @RequestMapping("/greeting")
    public String greeting(@RequestParam(value="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }
    /*
    @RequestMapping("/all")
    public String usersList(@RequestParam(value = "id", required = false, defaultValue="1") Long id, Model model){
        model.addAttribute("user", userRepository.findOne(id));
        return "all";
    }
*/
     @RequestMapping("/users")
    public String usersList(Model model){
        model.addAttribute("users", userRepository.findAll());
        return "users";
    }
    
    @GetMapping(path="/delete")
    public @ResponseBody String removeOrder(@RequestParam Long Id){
        User n = new User();
        n.setId(Id);
        userRepository.delete(n);
        return "Deleted";
    }
    
       @GetMapping(path="/update") // Map ONLY GET Requests
	public @ResponseBody String updateUser (@RequestParam Long id, @RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = userRepository.findOne(id);
                n.setName(name);
                n.setEmail(email);
		userRepository.save(n);
		return "Updated";
	}
        
}
